div {
	/*text-align: center;*/
	position : relative;
	/*border: solid 2px white;*/
}
canvas {
	border: solid white 2px;
	position: absolute;
	top:50%;
	left:50%;
	transform: translate(-50%, 50%);
	
}

div是canvas的父block，这样可以实现垂直居中


两个block并排
body {
		background-color: #202028;
		/*border: solid 2px yellow;*/
		display: flex;
		margin: 0;
		text-align: center; /*很关键*/
}

canvas {
	border: solid white 2px;
	
}

.score {
	color: white;
}

.game {
	flex: 1 1 auto;
}

==============================
var key = [
	[65, 68, 81, 69, 83],
	[72, 75, 89, 73, 74],
];
for (var i = 0; i < 2; i++)
{
	document.addEventListener('keydown', event => {
		/*
			37 left arrow 39 right arrow 40 down arrow 81 q 87 e
		*/
		console.log("i is " + i + ", key is " + key + ", value is " + key[0][0]);
		if (event.keyCode === key[i][0]) 
		....
}

这里会报错
因为当真正出现keydown的到时候，i已经变成了3

===================================
module.export('xxx')

const XXX = require('xxx'); //这个xxx就像一个类

==================================
打印 console.log("message is $(msg)");
==================================
connection后会获取到一个conn
这个conn有send方法
=================================
nodejs的建链事件触发流程：

server端：
require wc的Server，然后得到一个变量，当成是一个类明
然后new一个刚刚得到的类名的变量，并且传入端口new xx({port:9000});

然后用这个变量监听事件,监听函数为on,事件有 connection， 自己写回调。

client端:
自己创建一个 WebSocket 类，传入server端地址，返回的就是连接。
监听open事件。

server端，监听到connection事件以后，返回给server端一个连接
然后再在连接上监听其他事件
比如 conn.on('message',callback); conn.on('close', callback);

client端：
server端如果有connection事件以后，open事件也会被触发。
在这里之后，client就可以用连接的send给server发消息了。

server端：
server端监听了message事件，所以说后续交互就用message事件来处理。

client端:
退出

server端:
监听到了退出事件，然后自己处理自己的
=====================================
如果说几个js文件里面，定义了不同的类，但是一个文件需要用另一个文件的类

需要首先导出需要用的类：
module.exports = Client;

然后在用的地方
const Client = require('./xxx/xxx/client'); //路径，然后最后不带js后缀
======================================
打印一个变量，带参数就像linux一样
需要用的是``符号 然后${variable}
======================================











